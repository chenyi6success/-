基于简单移动平均数（SMA）的交易策略
具体步骤如下：

（1）导入工具
代码开头导入了几个Python工具包：
numpy 和 pandas：用来处理数据。
matplotlib：用来画图。
datetime：用来处理日期。

（2）读取数据
代码读取了一个包含股票价格的文件（比如苹果公司的股票数据）。
数据包括每天的收盘价。

（3）计算SMA
代码计算了两条SMA线：
一条是42天的短期SMA。
一条是252天的长期SMA。

（4）生成交易信号
代码根据短期SMA和长期SMA的关系，生成交易信号：
如果短期SMA > 长期SMA，标记为 +1（买入）。
如果短期SMA < 长期SMA，标记为 -1（卖出）。

（5）画图
代码画出了苹果公司的股票价格、两条SMA线，以及交易信号（买入或卖出）。
############################################################################################################################################################################
# 1. 导入工具包
# numpy 和 pandas 用于数据处理，matplotlib 用于画图，datetime 用于处理日期
import numpy as np
import pandas as pd
import datetime as dt
from pylab import mpl, plt

# 设置画图的样式和字体
plt.style.use('seaborn')
mpl.rcParams['font.family'] = 'serif'
%matplotlib inline  # 在 Jupyter Notebook 中显示图表

# 2. 读取数据
# 从 CSV 文件中读取股票数据，文件路径为 '../../source/tr_eikon_eod_data.csv'
# index_col=0 表示用第一列作为索引（日期），parse_dates=True 表示将日期解析为日期格式
raw = pd.read_csv('../../source/tr_eikon_eod_data.csv', index_col=0, parse_dates=True)

# 3. 查看数据信息
# 打印数据的摘要信息，包括行数、列数、数据类型等
raw.info()

# 4. 选择股票
# 选择苹果公司（AAPL.O）的股票数据
symbol = 'AAPL.O'

# 5. 创建新的 DataFrame
# 只保留苹果公司的股票数据，并删除缺失值（NaN）
data = pd.DataFrame(raw[symbol]).dropna()

# 6. 设置 SMA 的窗口大小
# 短期 SMA 的窗口大小为 42 天，长期 SMA 的窗口大小为 252 天
SMA1 = 42  # 短期 SMA
SMA2 = 252  # 长期 SMA

# 7. 计算 SMA
# 计算短期 SMA 和长期 SMA，并将结果添加到 DataFrame 中
data['SMA1'] = data[symbol].rolling(SMA1).mean()  # 计算 42 天的 SMA
data['SMA2'] = data[symbol].rolling(SMA2).mean()  # 计算 252 天的 SMA

# 8. 画图
# 画出苹果公司的股票价格、短期 SMA 和长期 SMA
data.plot(figsize=(10, 6))

# 9. 删除缺失值
# 删除 SMA 计算过程中产生的缺失值（因为前 252 天没有足够的数据计算长期 SMA）
data.dropna(inplace=True)

# 10. 生成交易信号
# 根据短期 SMA 和长期 SMA 的关系生成交易信号：
# 如果短期 SMA > 长期 SMA，标记为 1（买入）；否则标记为 -1（卖出）
data['Position'] = np.where(data['SMA1'] > data['SMA2'], 1, -1)

# 11. 查看最后几行数据
# 打印 DataFrame 的最后几行，检查交易信号是否正确生成
data.tail()

# 12. 画出最终结果
# 画出苹果公司的股票价格、两条 SMA 线以及交易信号
ax = data.plot(secondary_y='Position', figsize=(10, 6))
ax.get_legend().set_bbox_to_anchor((0.25, 0.85))  # 调整图例的位置
