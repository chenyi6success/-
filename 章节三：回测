第三章：回测（Backtesting）
1. 为什么要做回测？
回测就是用历史数据模拟你的交易策略，看看它以前能不能赚钱。

想象一下，你有一个炒股秘籍，但你不知道它是真的有用，还是只是个玄学。你可以拿过去几年的股市数据，把你的交易策略跑一遍，看看如果你早几年用这个策略，会不会赚到钱。
这就叫回测。

回测不仅能帮你验证策略是否有效，还能：
确保你理解策略，不会不小心搞错。
优化策略，看看稍微调整一下会不会赚更多。
发现问题，比如数据错误、交易成本、心理误判等。

2. 该用什么工具做回测？
  1. 免费 & 开源回测平台
(1) Backtrader
✅ 优点：

开源免费，适用于个人和小型团队。
支持多市场（股票、期货、外汇、加密货币）。
可以直接接入实盘交易（IB、Binance、Alpaca等）。
内置可视化分析（回测结果、资金曲线、交易信号）。
❌ 缺点：

需要Python 编程能力，不适合零编程基础用户。
文档和社区支持不如商业软件强。
📌 **适合：**个人投资者、小型量化团队，希望用 Python 进行回测和实盘交易的用户。

(2) Zipline
✅ 优点：

由 Quantopian 团队开发，曾用于顶级量化竞赛。
免费开源，支持 Python。
内置数据处理、财报数据整合（Quandl API）。
历史模拟与实盘交易集成（Alpaca API）。
❌ 缺点：

开发已停止维护（社区仍有部分支持）。
不支持高频交易，只适合日线级别回测。
依赖 Pandas 计算，回测速度较慢。
📌 适合：想研究因子选股、日线级别交易的个人交易者。

(3) QuantConnect
✅ 优点：

免费提供云端回测，支持C#、Python、F# 语言。
可回测股票、期货、外汇、加密货币等。
提供超大规模历史数据（比 Zipline/Backtrader 更完善）。
可连接 IB、Binance 进行实盘交易。
❌ 缺点：

本地回测体验不佳，主要依赖云端计算。
高级功能需要付费，例如更长时间的数据访问权限。
📌 **适合：**希望使用云计算资源，并且喜欢 Python 或 C# 进行量化交易的用户。

(4) FastQuant
✅ 优点：

基于 Backtrader，但封装得更简单，适合新手。
只需几行 Python 代码 就能运行回测。
适用于股票、外汇等市场，支持多种技术指标（MACD、均线等）。
❌ 缺点：

功能不如 Backtrader 强大，灵活性较低。
不支持实时交易。
📌 **适合：**想要快速上手回测但不想写太多代码的 Python 用户。

2. 商业 & 付费回测平台
(5) TradeStation
✅ 优点：

一体化交易平台，集成了回测、交易执行、自动化策略运行。
内置海量历史数据，无需额外下载。
适合技术分析策略（均线、KDJ、MACD、布林带等）。
支持EasyLanguage 编程（比 Python 简单）。
❌ 缺点：

只能在 TradeStation 自家平台交易，策略不通用。
回测能力一般，不适合高频交易。
需要订阅，费用较高（$99/月起）。
📌 **适合：**传统交易者，希望边回测边直接执行策略的用户。

(6) MetaTrader 4/5（MT4/MT5）
✅ 优点：

适用于外汇、期货、加密货币交易。
内置策略回测系统（支持 MQL4/MQL5 编程）。
支持实盘交易，可以自动执行策略。
❌ 缺点：

不适用于股票交易。
回测工具较简单，无法处理复杂数据分析。
📌 适合：做外汇、期货交易的用户，希望在一个平台完成回测+实盘交易。

(7) MATLAB
✅ 优点：

功能强大，适合复杂数学模型、统计分析、机器学习等策略。
计算速度快，支持大规模数据回测（比 Excel 快）。
提供专用金融工具箱（Financial Toolbox）。
❌ 缺点：

价格昂贵（许可证费用 $1,000+）。
不支持直接交易，只能用来做回测。
📌 **适合：**数据科学家、量化研究员，希望构建复杂数学模型的用户。

(8) Bloomberg Terminal
✅ 优点：

提供全市场数据（股票、债券、期货、外汇、加密等）。
支持回测、因子分析、风险管理。
适用于专业机构、基金经理。
❌ 缺点：

费用极高（$25,000+/年）。
需要专业培训，不适合个人交易者。
📌 **适合：**专业投资机构、对冲基金经理。

1. 从哪里获取历史数据？
获取历史数据的方法有很多，免费 & 付费数据源各有优缺点：

（1）免费数据源
✅ **优点：**完全免费，适合新手学习和测试策略。
❌ 缺点：通常数据质量一般，可能有幸存者偏差、数据缺失等问题。

数据来源	适用市场	数据类型	优点	缺点
Yahoo Finance	股票、ETF	日线数据	免费，简单易用	不能下载高频数据，可能有幸存者偏差
Alpha Vantage	股票、外汇、加密	日线、分钟级数据	免费 API 提供多种数据	免费额度有限，速度较慢
Binance API	加密货币	分钟级数据	免费提供全市场数据	只能用于加密货币交易
Quandl（部分免费）	股票、经济数据	日线数据	提供部分免费的宏观经济数据	高级数据需要付费
Oanda	外汇	分钟级数据	免费的外汇数据	只能用于外汇市场

  （2）付费数据源
✅ 优点：数据完整、质量高、包含详细的市场信息（如订单簿、L2 数据）。
❌ 缺点：价格昂贵，一般适用于专业机构或资金较多的量化交易员。

数据来源	适用市场	数据类型	价格	优点	缺点
Bloomberg Terminal	全市场	高频、L2 数据	$25,000+/年	全市场数据，质量高	太贵了，个人投资者用不起
Reuters Eikon	股票、期货、外汇	高频、新闻数据	$20,000+/年	专业机构使用	价格昂贵
TickData	股票、期货	Tick 级数据	按年收费，$1000+	高频数据质量高	价格较贵
Polygon.io	股票、加密、外汇	Tick 级	月费 $49+	数据完整，支持 L2 订单流	需要付费
Intrinio	股票	财报 + 价格数据	订阅制，$99+	提供财务因子数据	价格偏贵

2.获取数据的途径有哪些？
  1. API 接口
定义与原理：
API（Application Programming Interface，应用程序接口）允许程序通过编程方式与数据提供商的服务器进行交互，直接请求并获取所需的历史数据、实时数据或其他信息。
  2. 数据平台直接下载
定义与原理：
很多数据平台（不论是免费还是付费）提供直接下载数据的功能。用户可以通过平台的网站界面，选择所需的时间区间和数据类型，然后下载为 CSV、Excel、JSON 等格式的文件。
  3. 网络爬虫抓取
定义与原理：
当目标数据没有公开的 API 或数据平台提供时，可以使用网络爬虫技术，通过程序模拟浏览器行为，从网页上提取需要的数据。分别举例有哪些平台

4.不同数据源的常见问题
  1.拆股 & 分红调整 → 否则股价会“假暴跌”。
  2.幸存者偏差 → 退市的股票可能会影响策略真实表现。
  3.高低点是否可靠 → 避免因假突破/假回撤导致错误交易


5.怎么评估回测结果
  夏普比率（Sharpe Ratio） 和 最大回撤（Maximum Drawdown, MDD） 是两个最常用的指标。它们的作用分别是：
    夏普比率：衡量赚钱的稳定性，告诉你单位风险能赚多少钱。
    最大回撤：衡量亏损的最大风险，告诉你历史上最惨的时候亏了多少。
    
###详细解释
1.夏普比率
  风险的度量——标准差
在投资中，风险通常用收益率的波动性来表示，波动性越大，风险也就越高。标准差是衡量这种波动性的一种常用统计指标。比如，如果一个投资组合的年化收益率波动为10%，这10%就代表了你在一年内可能遇到的正负波动幅度。
  超额收益
超额收益指的是投资收益减去无风险收益（比如国债收益率）的部分。它反映了你因承担风险而获得的额外收益。
  单位风险能赚多少钱
将超额收益除以风险（标准差），就得到了每承担一单位风险所获得的超额收益。换句话说，如果一个投资组合的夏普比率为1.5，就意味着每承担1单位的风险（标准差），你可以获得1.5单位的超额收益。这个比例越高，说明在每单位风险上获得的回报越多，投资表现越优秀，赚钱的稳定性也越高。

举个简单的例子
假设有两个投资组合：

组合A：超额收益为6%，标准差为5%，则夏普比率为 
6%/5%=1.2。
组合B：超额收益为8%，标准差为8%，则夏普比率为 
8%/8%=1.0
虽然组合B的超额收益更高，但它的风险也更大。夏普比率告诉我们组合A每承担1单位风险能赚1.2单位的超额收益，而组合B每承担1单位风险仅赚1.0单位的超额收益。因此，从风险调整后的角度看，组合A的表现更好。

2.最大回撤
    最大回撤（Maximum Drawdown, MDD）可以用最简单的话来理解：它表示在一段时间内，你的投资或账户价值从最高点到最低点的最大下降幅度，也就是“最糟糕情况下损失了多少钱”。

6.回测过程中常见的几个错误
      ### **回测过程中常见的几个错误（白话版）**
回测就像**用历史数据“模拟炒股”**，看你的交易策略过去是否能赚钱。但如果回测做得不对，**你以为能赚大钱，结果实盘一交易就亏惨了**。下面是几个**最常见的回测错误**，如果不注意，回测结果可能会**严重失真**。

---

## **1. 前视偏差（Look-Ahead Bias）——“用未来的数据作弊”**
**✅ 正确的回测：只能用当时已经发生的数据做决策**  
**❌ 错误的回测：用了未来才知道的数据，等于开“上帝视角”**

### **❌ 什么是前视偏差？**
- 假设你的交易策略是：
  > **“当股票触及当天最低价时买入”**
  - 但问题是：**你怎么能提前知道当天最低价？**
  - 现实交易中，只有等**市场收盘后**，你才能知道当天最低价是多少。
  - **如果你的回测用到了“当天最低价”这个数据，就是前视偏差**。

### **📌 真实案例**
- 假设某股票今天的**最低价是 100 元**，你的回测代码写的是：
  ```python
  if price == low_of_day:
      buy()
  ```
- 这意味着你**提前知道了市场最低价**，在现实中根本做不到！

### **✅ 解决办法**
- **只能用当时可见的数据**，比如**前一天的数据**。
- 代码要改成：
  ```python
  if price == yesterday_low:
      buy()
  ```
  - **这样才符合真实市场交易规则**。

---

## **2. 幸存者偏差（Survivorship Bias）——“只选赢家，忽略死掉的股票”**
**✅ 正确的回测：要包含所有股票，包括退市的公司**  
**❌ 错误的回测：只回测现在还活着的股票**

### **❌ 什么是幸存者偏差？**
- 你在回测时，用的是**当前市场上的股票**，但**忽略了过去几年已经破产或退市的公司**。
- 结果你的策略好像特别赚钱，但其实只是因为你回测的数据集里**全是活下来的“赢家”**，没有“死掉的公司”。

### **📌 真实案例**
- 你用 2010-2020 年的数据做回测，**选了现在（2024 年）仍然存在的公司**。
- 但问题是，2010 年时**市场上还有很多后来破产的公司**，比如：
  - 2010 年时的诺基亚（NOK），你可能会选进来，但它后来股价暴跌。
  - 2010 年时的雷曼兄弟（Lehman Brothers），2018 年时已经破产了。
- 如果你**只回测幸存下来的公司，回测收益会被高估**，因为“死人”都没被算进去！

### **✅ 解决办法**
- **使用“无幸存者偏差”的数据库**，比如：
  - **CRSP（美国股市历史数据库）**
  - **彭博（Bloomberg）**
- **自己存数据**：每天保存所有股票的价格，不管它们后来是涨是跌，甚至是退市。

---

## **3. 数据挖掘偏差（Data-Snooping Bias）——“瞎调参数，直到结果好看”**
**✅ 正确的回测：参数要有逻辑，不能瞎调**  
**❌ 错误的回测：测试了 1000 种参数组合，找到一个“最赚钱”的，但只是运气好**

### **❌ 什么是数据挖掘偏差？**
- 你写了一个策略，测试不同的**均线参数**，比如：
  - 5 日均线 vs. 10 日均线
  - 7 日均线 vs. 21 日均线
  - 9 日均线 vs. 30 日均线
  - … **一直试 1000 种组合**
- 你发现 **“9 日均线 + 30 日均线”** 过去 10 年里回测表现最好。
- 但问题是：**这个参数真的有用，还是只是碰巧在过去 10 年有效？**
- **你可能只是“蒙对了”**，但在未来 10 年这个策略可能根本不行。

### **📌 真实案例**
- 有人做了一个策略，回测 2010-2020 年时，收益率 300%！
- 但 2021 年开始，实盘一用，**直接亏光了**。
- 这就是**过度优化导致的“假策略”**，它只适用于过去的数据，但对未来没用。

### **✅ 解决办法**
- **不要过度优化参数**，参数应该有“经济学逻辑”支持，而不是纯粹靠回测调出来的。
- **用“训练集 + 测试集”**
  - 2010-2015 年的数据用于优化参数（训练集）
  - 2016-2020 年的数据用于验证效果（测试集）
  - 只有在**测试集上也表现好的策略，才是真的可靠**。

---

## **4. 忽略交易成本（Trading Costs）——“只看理论收益，忽略实际交易的花费”**
**✅ 正确的回测：要考虑交易费用、滑点、冲击成本**  
**❌ 错误的回测：假设每次交易都能按最低买入、最高卖出，没有手续费**

### **❌ 什么是交易成本问题？**
- 你写了一个**短线交易策略**，一天能交易 100 次。
- 回测收益率高达 **500%**，看起来赚翻了！
- 但现实交易时，每次交易都有成本：
  - **手续费**（佣金）
  - **滑点**（市场价格变动）
  - **冲击成本**（大单子会影响市场价格）
- **如果你没有考虑这些成本，回测可能是假的**。

### **📌 真实案例**
- 一个高频策略，每次交易能赚 0.1%。
- 但每次交易的**成本是 0.15%**（佣金 + 滑点）。
- **回测盈利，实盘亏钱**，因为交易成本吃掉了所有利润。

### **✅ 解决办法**
- **回测时加上交易成本**，比如：
  ```python
  commission = 0.0005  # 交易费用 0.05%
  slippage = 0.0002  # 滑点 0.02%
  transaction_cost = commission + slippage
  ```
- **用真实市场数据来测试策略**，看看在**不同市场环境下是否依然赚钱**。

---

## **总结**
| **回测错误** | **错误示例** | **影响** | **解决方法** |
|------------|------------|------------|------------|
| **前视偏差** | 用“未来最低价”判断买入时机 | 交易信号不现实 | 只能用“前一天的数据” |
| **幸存者偏差** | 只测试现在还活着的股票 | 回测结果高估 | 用“无幸存者偏差”的数据 |
| **数据挖掘偏差** | 试了 1000 种参数，选最好的 | 未来可能不赚钱 | 用“训练集 + 测试集”验证 |
| **忽略交易成本** | 假设没有手续费 & 滑点 | 回测盈利，实盘亏钱 | 加入交易成本计算 |

7.列举交易模式
      
策略	适用市场	适用周期	核心逻辑
均值回归策略	股票、外汇、期货	日线/周线	价格偏离均值后回归
配对交易	股票、ETF	日线/周线	相关资产价格偏离均值后回归
短期反转	股票	日内/1-5天	超跌反弹
动量交易	股票、期货	1个月-6个月	强者恒强，涨的更涨
日内突破	美股、A股	1分钟-1小时	突破关键价格后顺势交易
均线交叉	股票、外汇	日线/周线	金叉买入，死叉卖出
波动率突破	期货、外汇	日线/小时线	波动率放大后进入趋势
